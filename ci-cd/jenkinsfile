pipeline {
  agent {
    kubernetes {
      yamlFile './ci-cd/slave-pod.yaml'
    }
  }

  environment {
      AWS_CREDENTIALS = credentials("aws-credentials")
      AWS_DEFAULT_REGION = "sa-east-1"
  }

  parameters {
    string(name: 'container_name', defaultValue: 'deploy-test-container', description: 'Container name')
    string(name: 'image_name', defaultValue: 'deploy-test', description: 'Image name')
    string(name: 'image_tag', defaultValue: 'latest', description: 'Image tag')
    string(name: 'container_port', defaultValue: '80', description: 'Container port')
  }

  stages {
    stage('install') {
      steps {
        container('composer-container'){
          sh 'cp .env.example .env'
          sh 'composer install --no-interaction'
          sh 'php artisan key:generate'
        }
      }
    }

    stage('tests') {
      steps {
        container('composer-container'){
          sh 'composer tests'
        }
      }
    }

    stage('build') {
      steps {
        container('docker'){

          // install aws cli
          sh 'apk add --no-cache aws-cli'
          sh 'aws --version'
          sh 'aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin 705505288478.dkr.ecr.sa-east-1.amazonaws.com'

          // build image
          sh 'docker build -t ${image_name} .'

          // delete old images in ecr
          sh 'aws ecr batch-delete-image --repository-name deploy-test --image-ids imageTag=latest'

          // push image to ecr
          sh 'docker tag ${image_name}:${image_tag} 705505288478.dkr.ecr.sa-east-1.amazonaws.com/${image_name}:${image_tag}'
          sh 'docker push 705505288478.dkr.ecr.sa-east-1.amazonaws.com/${image_name}:${image_tag}'
        }
      }
    }
  }
}





