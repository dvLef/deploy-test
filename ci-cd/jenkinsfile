pipeline {
  agent any

  parameters {
    string(name: 'container_name', defaultValue: 'deploy-test-container', description: 'Container name')
    string(name: 'image_name', defaultValue: 'deploy-test', description: 'Image name')
    string(name: 'image_tag', defaultValue: 'latest', description: 'Image tag')
    string(name: 'container_port', defaultValue: '80', description: 'Container port')
  }

  stages {
    stage('evironment') {
      steps {
        git branch: 'main', url: 'https://github.com/dvLef/deploy-test'
        sh 'apt-get update'
        sh 'apt-get install php curl php-curl php-xml zip unzip php-zip ca-certificates gnupg lsb-release  -y'
        sh 'php -v'
        sh 'curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer'
        sh 'composer --version'
        sh 'mkdir -p /etc/apt/keyrings'
        sh 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg'
        sh 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null'
        sh 'apt-get install docker-ce docker-ce-cli containerd.io -y'
        sh 'service docker start'
      }
    }

    stage('install') {
      steps {
        sh 'cp .env.example .env'
        sh 'composer update'
        sh 'composer install --no-interaction'
        sh 'php artisan key:generate'
      }
    }

    stage('tests') {
      steps {
        sh 'composer tests'
      }
    }

    stage('build') {
      steps {
        sh 'docker build -t $image_name:$image_tag .'
      }
    }

  }
}


